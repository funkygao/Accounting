<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="reengineering.ddd.accounting.mybatis.Dao">
    <select id="findCustomerById" resultMap="model.customer">
        select c.id               as id,
               c.name             as name,
               c.email            as email,
               a.id               as account_id,
               a.current_amount   as account_current_amount,
               a.current_currency as account_current_currency
        from customers c
                 left outer join accounts a on a.customer_id = c.id
        where c.id = #{id}
    </select>

    <select id="findSourceEvidencesByCustomerId" resultMap="model.sourceEvidence">
        select e.id                 as evidence_id,
               e.customer_id        as evidence_customer_id,
               e.type               as evidence_type,
               t.id                 as id,
               t.account_id         as account_id,
               t.source_evidence_id as source_evidence_id,
               t.amount             as amount,
               t.currency           as currency,
               t.created_at         as created_at,
               a.id                 as account_id,
               a.current_amount     as account_current_amount,
               a.current_currency   as account_current_currency
        from (select * from source_evidences limit #{from}, #{size}) as e
                 left outer join transactions t on t.source_evidence_id = e.id
                 left outer join accounts a on a.id = t.account_id
        where e.customer_id = #{customer_id}

    </select>

    <select id="findSourceEvidenceByCustomerAndId" resultMap="model.sourceEvidence">
        select e.id                 as evidence_id,
               e.customer_id        as evidence_customer_id,
               e.type               as evidence_type,
               t.id                 as id,
               t.account_id         as account_id,
               t.source_evidence_id as source_evidence_id,
               t.amount             as amount,
               t.currency           as currency,
               t.created_at         as created_at,
               a.id                 as account_id,
               a.current_amount     as account_current_amount,
               a.current_currency   as account_current_currency
        from source_evidences as e
                 left outer join transactions t on t.source_evidence_id = e.id
                 left outer join accounts a on a.id = t.account_id
        where e.id = #{id}
          and e.customer_id = #{customer_id}
    </select>

    <select id="findTransactionsByAccountId" resultMap="model.transaction">
        select t.id                 as id,
               t.account_id         as account_id,
               t.source_evidence_id as source_evidence_id,
               t.amount             as amount,
               t.currency           as currency,
               t.created_at         as created_at,
               s.id                 as evidence_id,
               s.customer_id        as evidence_customer_id,
               s.type               as evidence_type,
               a.id                 as account_id,
               a.current_amount     as account_current_amount,
               a.current_currency   as account_current_currency
        from transactions t
                 left outer join source_evidences s on s.id = t.source_evidence_id
                 left outer join accounts a on a.id = t.account_id
        where t.account_id = #{account_id} limit #{from}
            , #{size}
    </select>

    <select id="findTransactionsBySourceEvidenceId" resultMap="model.transaction">
        select t.id                 as id,
               t.account_id         as account_id,
               t.source_evidence_id as source_evidence_id,
               t.amount             as amount,
               t.currency           as currency,
               t.created_at         as created_at,
               s.id                 as evidence_id,
               s.customer_id        as evidence_customer_id,
               s.type               as evidence_type,
               a.id                 as account_id,
               a.current_amount     as account_current_amount,
               a.current_currency   as account_current_currency
        from transactions t
                 left outer join source_evidences s on s.id = t.source_evidence_id
                 left outer join accounts a on a.id = t.account_id
        where t.source_evidence_id = #{source_evidence_id}
    </select>

    <select id="findTransactionByAccountAndId" resultMap="model.transaction">
        select t.id                 as id,
               t.account_id         as account_id,
               t.source_evidence_id as source_evidence_id,
               t.amount             as amount,
               t.currency           as currency,
               t.created_at         as created_at,
               s.id                 as evidence_id,
               s.customer_id        as evidence_customer_id,
               s.type               as evidence_type,
               a.id                 as account_id,
               a.current_amount     as account_current_amount,
               a.current_currency   as account_current_currency
        from transactions t
                 left outer join source_evidences s on s.id = t.source_evidence_id
                 left outer join accounts a on a.id = t.account_id
        where t.id = #{id}
          and t.account_id = #{account_id}
    </select>

    <select id="findTransactionByEvidenceAndId" resultMap="model.transaction">
        select t.id                 as id,
               t.account_id         as account_id,
               t.source_evidence_id as source_evidence_id,
               t.amount             as amount,
               t.currency           as currency,
               t.created_at         as created_at,
               s.id                 as evidence_id,
               s.customer_id        as evidence_customer_id,
               s.type               as evidence_type,
               a.id                 as account_id,
               a.current_amount     as account_current_amount,
               a.current_currency   as account_current_currency
        from transactions t
                 left outer join source_evidences s on s.id = t.source_evidence_id
                 left outer join accounts a on a.id = t.account_id
        where t.id = #{id}
          and t.source_evidence_id = #{evidence_id}
    </select>

    <insert id="insertTransaction" useGeneratedKeys="true" keyProperty="holder.id" keyColumn="id"
            parameterType="reengineering.ddd.mybatis.support.IdHolder">
        insert into transactions (account_id, source_evidence_id, amount, currency, created_at)
        values (#{account_id}, #{evidence_id},
                #{description.amount.value}, #{description.amount.currency}, #{description.createdAt});
    </insert>

    <insert id="insertSourceEvidence" useGeneratedKeys="true" keyProperty="holder.id" keyColumn="id"
            parameterType="reengineering.ddd.mybatis.support.IdHolder">

        insert into source_evidences (customer_id, `type`)
        values (#{customer_id},
        <choose>
            <when test="description instanceof reengineering.ddd.accounting.description.SalesSettlementDescription">
                'sales-settlement'
            </when>
        </choose>
        );
    </insert>

    <insert id="insertSourceEvidenceDescription">
        <choose>
            <when test="description instanceof reengineering.ddd.accounting.description.SalesSettlementDescription">
                <include refid="insertSalesSettlementDescription"/>
            </when>
        </choose>
    </insert>

    <update id="updateAccount">
        update accounts
        set current_amount = current_amount + #{change.total.value}
        where customer_id = #{customer_id}
          and id = #{id};
    </update>

    <sql id="insertSalesSettlementDescription">
        insert into sales_settlements (id, order_id, account_id, total_amount, total_currency)
        values (#{id}, #{description.order.id}, #{description.account.id}, #{description.total.value},
        #{description.total.currency});
        insert into sales_settlement_details(sales_settlement_id, amount, currency) values
        <foreach collection="description.details" item="detail" separator=",">
            (#{id}, #{detail.amount.value}, #{detail.amount.currency})
        </foreach>
    </sql>

    <select id="countTransactionsInAccount" resultType="int">
        select count(id)
        from transactions
        where account_id = #{id}
    </select>

    <select id="countSourceEvidencesByCustomer" resultType="int">
        select count(id)
        from source_evidences
        where customer_id = #{id}
    </select>

    <select id="countTransactionsBySourceEvidence" resultType="int">
        select count(id)
        from transactions
        where source_evidence_id = #{id}
    </select>


</mapper>